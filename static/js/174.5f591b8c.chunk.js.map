{"version":3,"file":"static/js/174.5f591b8c.chunk.js","mappings":"gRAEaA,E,QAAWC,GAAAA,GAAH,+SACH,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAIL,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAEI,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAIH,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACA,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,mBCiBnB,MA3BA,YAAyB,IAATC,EAAQ,EAARA,KACd,OACE,+BAEI,SAACL,EAAD,UACGK,EAAKC,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aACrB,OACE,2BACE,gBACEC,MAAO,IACPC,IACEF,EAAY,6CAC8BA,GACtCG,EAENC,IAAKL,KAEP,uBAAIA,MAVGD,EAaZ,OAKV,ECvBc,SAASO,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,CAAC,GAAlC,eAAOZ,EAAP,KAAaa,EAAb,KAyBA,IAvBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAA2BJ,GAA3B,mGAEuBK,EAAAA,EAAAA,GAAY,UAAD,OAAWL,EAAX,aAFlC,UAEUM,EAFV,QAGUC,EAASD,EAAKhB,KAAKC,KACvB,kBAA4C,CAC1CE,KADF,EAAGA,KAEDe,UAFF,EAASA,UAGPd,aAHF,EAAoBA,aAIlBF,GAJF,EAAkCA,GAAlC,KAOUiB,OAXhB,sBAYY,IAAIC,MAAM,kBAZtB,OAcIP,EAAQI,GAdZ,kDAgBII,EAAAA,GAAAA,MAAY,KAAMC,SAhBtB,0DADc,yBAAC,SAAD,2BAoBdC,CAAYb,EACb,GAAE,CAACA,IAEAc,OAAOC,KAAKzB,GAAMmB,OAAS,EAC7B,OACE,+BACE,SAAC,EAAD,CAAMnB,KAAMA,KAGnB,C","sources":["components/movieDetails/cast.styled.js","components/movieDetails/Cast.jsx","pages/CastPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul `\n  padding-left: ${p => p.theme.space[0]}px;\n  display: grid;\n  max-width: calc(100vw);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: ${p => p.theme.space[4]}px;\n\n  margin-bottom: ${p => p.theme.space[0]}px;\n  justify-content: center;\n\n  list-style: none;\n  margin-left: ${p => p.theme.space[4]}px;\n  margin-right: ${p => p.theme.space[4]}px;\n`;\n","import PropTypes from 'prop-types';\nimport { CastList } from './cast.styled';\nimport defaultImg from '../images/defaultImg.png';\n\nfunction Cast({ cast }) {\n  return (\n    <>\n      {\n        <CastList>\n          {cast.map(({ id, name, profile_path }) => {\n            return (\n              <li key={id}>\n                <img\n                  width={180}\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/original${profile_path}`\n                      : defaultImg\n                  }\n                  alt={name}\n                />\n                <p>{name}</p>\n              </li>\n            );\n          })}\n        </CastList>\n      }\n    </>\n  );\n}\n\nexport default Cast;\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { fetchMovies } from '../service/fetchAPI';\nimport Cast from '../components/movieDetails/Cast';\n\nexport default function CastPage() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState({});\n\n  useEffect(() => {\n    async function getCastInfo(movieId) {\n      try {\n        const data = await fetchMovies(`/movie/${movieId}/credits`);\n        const result = data.cast.map(\n          ({ name, character, profile_path, id }) => ({\n            name,\n            character,\n            profile_path,\n            id,\n          })\n        );\n        if (!result.length) {\n          throw new Error('Cast not found');\n        }\n        setCast(result);\n      } catch (error) {\n        toast.error(error.message);\n      }\n    }\n    getCastInfo(movieId);\n  }, [movieId]);\n\n  if (Object.keys(cast).length > 0)\n    return (\n      <>\n        <Cast cast={cast} />\n      </>\n    );\n}\n"],"names":["CastList","styled","p","theme","space","cast","map","id","name","profile_path","width","src","defaultImg","alt","CastPage","movieId","useParams","useState","setCast","useEffect","fetchMovies","data","result","character","length","Error","toast","message","getCastInfo","Object","keys"],"sourceRoot":""}